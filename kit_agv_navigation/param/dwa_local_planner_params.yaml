DWAPlannerROS:

# Robot Configuration Parameters (m/s)
  max_vel_x: 0.55  # (double, default: 0.55 m/s) The maximum x velocity for the robot in m/s
  min_vel_x: 0.0 #  (double, default: 0.0 m/s) The minimum x velocity for the robot in m/s 

  max_vel_y: 0.0  # (double, default: 0.1 m/s) The maximum y velocity for the robot in m/s 
  min_vel_y: 0.0  # (double, default: -0.1 m/s) The minimum y velocity for the robot in m/s 

# The velocity when robot is moving in a straight line (m/s)
  max_vel_trans:  0.55  # (double, default: 0.55 m/s) The absolute value of the maximum translational velocity for the robot in m/s 
  min_vel_trans:  0.1  # (double, default: 0.1 m/s) The absolute value of the minimum translational velocity for the robot in m/s 

  max_vel_theta: 0.5  # (double, default: 1.0 rad/s) The absolute value of the maximum rotational velocity for the robot in rad/s 
  min_vel_theta: 0.2  #  (double, default: 0.4 rad/s) The absolute value of the minimum rotational velocity for the robot in rad/s 

  acc_lim_x: 2.5  #  (double, default: 2.5 m/s2) The x acceleration limit of the robot in meters/sec^2 
  acc_lim_y: 0.0  #  (double, default: 2.5 m/s2) .The y acceleration limit of the robot in meters/sec^2 
  acc_lim_theta: 3.2  # (double, default: 3.2 rad/s2) .The rotational acceleration limit of the robot in radians/sec^2 

# Goal Tolerance Parametes (m)
  xy_goal_tolerance: 0.2  # (double, default: 0.10 m) Sai so vi tri cho phep tai vi tri dich (The tolerance in meters for the controller in the x & y distance when achieving a goal)
  yaw_goal_tolerance: 0.05       # (double, default: 0.05 m) Sai so goc cho phep tai vi tri dich (The tolerance in radians for the controller in yaw/rotation when achieving its goal)
  latch_xy_goal_tolerance: true # (bool, default: false) Neu vi tri robot ngoai sai so dich (xy), cho phep robot quay tai cho? (If goal tolerance is latched, if the robot ever reaches the goal xy location it will simply rotate in place, even if it ends up outside the goal tolerance while it is doing so)

# Forward Simulation Parameters
  sim_time: 1.7  # (double, default: 1.7 s) The amount of time to roll (forward-simulate) trajectories out in seconds
  sim_granularity: 0.025  # (double, default: 0.025) The step size, in meters, to take between points on a given trajectory (The granularity with which to check for collisions along each trajectory)
  angular_sim_granularity: 0.1 # (double, default: 0.1) The granularity with which to check for collisions for rotations in radians
  vx_samples: 3  # (integer, default: 3) So luong mau su dung khi kham pha khong gian van toc theo truc x (The number of samples to use when exploring the x velocity space)
  vy_samples: 10  # (integer, default: 10) So luong mau su dung khi kham pha khong gian van toc theo truc y (The number of samples to use when exploring the y velocity space )
  vth_samples: 20 # (integer, default: 20) So luong mau su dung khi kham pha khong gian van toc quay (The number of samples to use when exploring the theta velocity space)
  controller_frequency: 10.0 # (double, default: 20.0 Hz) Tan so ma bo dieu khien nay duoc goi (The frequency at which this controller will be called in Hz. Uses searchParam to read the parameter from parent namespaces if not set in the namespace of the controller. For use with move_base, this means that you only need to set its "controller_frequency" parameter and can safely leave this one unset)
  # penalize_negative_x: true  # (bool, default: true) Whether to penalize trajectories that have negative x velocities. 
  use_dwa: true # (bool, default: true) Su dung cua so dong de han che toc do lay mau cua cua so nho (Use dynamic window approach to constrained sampling velocities to small window)
  restore_defaults: false # (bool, default: false) Lay lai cau hinh ban dau (Restore to the original configuration)

# Trajectory Scoring Parameters 
# cost = path_distance_bias * (distance to path from the endpoint of the trajectory in meters) + goal_distance_bias * (distance to local goal from the endpoint of the trajectory in meters) + occdist_scale * (maximum obstacle cost along the trajectory in obstacle cost (0-254))
  path_distance_bias: 32.0        # (double, default: 32.0) Trong so dieu chinh local_plan bam sat theo global plan -(The weighting for how much the controller should stay close to the path it was given)-(weighting for how much it should stick to the global path plan)-(The weight for the path distance part of the cost function)
  goal_distance_bias: 24.0        # (double, default: 24.0) Trong so dieu chinh toc do dat goal (The weighting for how much the controller should attempt to reach its local goal, also controls speed)-(wighting for how much it should attempt to reach its goal)-(The weight for the goal distance part of the cost function)
  occdist_scale: 0.01             # (double, default: 0.01) Trong so dieu chinh kha nang tranh vat can (The weighting for how much the controller should attempt to avoid obstacles)-(weighting for how much the controller should avoid obstacles)-(The weight for the obstacle distance part of the cost function)
  forward_point_distance: 0.5     # (double, default: 0.325 m) Khoang cach tu tam robot den diem ghi bo sung (The distance from the center point of the robot to place an additional scoring point, in meters)-(how far along to place an additional scoring point)
  stop_time_buffer: 0.5           # (double, default: 0.2 s) Khoang thoi gian robot phai dung lai truoc khi va cham (The amount of time that the robot must stop before a collision in order for a trajectory to be considered valid in seconds)-(amount of time a robot must stop in before colliding for a valid traj)
  scaling_speed: 0.25             # (double, default: 0.25 m/s) Toc do bat dau scale footprint (The absolute value of the veolicty at which to start scaling the robot's footprint, in m/s)-(absolute velocity at which to start scaling the robot's footprint)
  max_scaling_factor: 0.2         # (double, default: 0.2) He so toi da de scale footprint (The maximum factor to scale the robot's footprint by)-(how much to scale the robot's footprint when at speed)
  twirling_scale: 0.0             # (double, default: 0.0) Trong so de phat hien bat ky vat thay doi nao phia truoc robot (The weight for penalizing any changes in robot heading)
  publish_cost_grid: false        # (bool, default: false) (Whether or not to publish the cost grid that the planner will use when planning. When true, a sensor_msgs/PointCloud2 will be available on the ~<name>/cost_cloud topic. Each point cloud represents the cost grid and has a field for each individual scoring function component as well as the overall cost for each cell, taking the scoring parameters into account)

# Oscillation Prevention Parameters
  oscillation_reset_dist: 0.05    # (double, default: 0.05 m) Khoang cach robot phai di chuyen truoc khi reset the oscillation flags (How far the robot must travel in meters before oscillation flags are reset)-(how far to travel before resetting oscillation flags)-(The distance the robot must travel before oscillation flags are reset, in meters)
  oscillation_reset_angle: 0.2    # (double, default: 0.2 rad) Goc robot phai quay truoc khi reset the oscillation flags (The angle the robot must turn before oscillation flags are reset)

# Global Plan Parameters
  prune_plan: true  # (bool, default: true) Cho phep xac dinh xem robot co di qua dich? Neu set true, robot se dung khi di qua goal 1m (Defines whether or not to eat up the plan as the robot moves along the path. If set to true, points will fall off the end of the plan once the robot moves 1 meter past them) 

# Debugging
  publish_traj_pc : true
  publish_cost_grid_pc: true
